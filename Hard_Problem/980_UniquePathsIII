class Solution {
public:  
    int Start_X, Start_Y;
    int End_X, End_Y; 
    vector<vector<int>> grids;

    int fin = 0;

    int uniquePathsIII(vector<vector<int>>& grid) {
        int need_do = 0; 
        fin = 0;
        grids = grid;

        for(int i = 0 ; i < grid.size(); i++)
        {
            for(int j = 0 ; j < grid[i].size() ; j++)
            {
                if(grid[i][j] == 1) { Start_X = i; Start_Y = j; }
                else if(grid[i][j] == 2) { End_X = i; End_Y = j; }
                
                if(grid[i][j] != -1) { need_do++; }
            }
        }        

        dfs(Start_X, Start_Y, need_do);
        
        return fin;
    }
    void dfs(int x, int y, int this_need_do)
    {
        this_need_do--;            
        if(this_need_do < 0) { return ; }
        if(grids[x][y] == 2 && this_need_do == 0) { fin++; return;  }
        if(grids[x][y] == 2) { return ; }
        
        grids[x][y] = 3;        

        if(x+1 < grids.size()  )
        {            
            if(grids[x+1][y] == 0 || grids[x+1][y] == 2) { dfs(x+1, y, this_need_do); }
        }
        if(x-1 >= 0   )
        {            
            if(grids[x-1][y] == 0 || grids[x-1][y] == 2) { dfs(x-1, y, this_need_do);} 
        }
        if(y+1 < grids[x].size() )
        {            
            if(grids[x][y+1] == 0 || grids[x][y+1] == 2) { dfs(x, y+1, this_need_do);}
        }
        if(y-1 >= 0  )
        {            
            if(grids[x][y-1] == 0 || grids[x][y-1] == 2) { dfs(x, y-1, this_need_do);}
        }
        grids[x][y] = 0;
    }           
};
